

toDo:
-token.h						: add semicolon token *
-token.c						: add semicolon token in human table *
-lexer.c						: add semicolon token in lexer
-lexer.c						: add semicolon token in lexer
-parser/grammar/arithmetic.c			: add statements rule
-parser.h 					:add explist object to parser
-parser.h 					:add explist object to funcdef
-parser/grammar/arithmetic.c	: add braces and statements in func def
-parser.h 					:add explist object to while loop
-parser/grammar/arithmetic.c	: add braces and statements in while loop

statements	: (expr SEMICOLON)*

expr		: KEYWORD:VAR IDENTIFIER EX comp-expr
			: comp-expr ((KEYWORD:AND | KEYWORD:OR | KEYWORD:XOR) comp-expr)*

comp-expr	: NOT comp-expr
			: arith-exp ((EQEQ|NEQ|GT|GTE|LT|LTE) arith-exp)*

arith-expr	: term ((PLUS|MINUS) term)*
			
term		: factor ((MUL|DIV) factor)*

factor		: (PLUS|MINUS) factor
			: call

call		: atom (LPAREN(EXPR (COMMA EXPR)*)? RPAREN)?

atom		: INT|FLOAT|IDENTIFIER
			: LPAREN expr RPAREN
			: if-expr
			: while-expr
			: func-def

if-expr		: KEYWORD:IF expr KEYWORD:THEN expr
				(KEYWORD:ELIF expr KEYWORD:THEN expr)*
				(KEYWORD:ELSE expr)

while-expr	: KEYWORD:WHILE expr KEYWORD:THEN expr

func-def	: KEYWORD:FUN IDENTIFIER?
				LPAREN (IDENTIFIER (COMMA IDENTIFIER)* RPAREN?
				ARROW expr


* - 0 or more
? - 0 or 1

